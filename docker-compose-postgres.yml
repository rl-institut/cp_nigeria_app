version: "3.7"

services:

  db_pg:
    image: postgres:14.3-alpine
    container_name: cp_pg
    restart: always
    env_file:
      - .envs/db.postgres
    expose:
      - 5432
    volumes:
      - db_data_pg:/var/lib/postgresql/data/
    networks:
      - cp_network
  app_pg:
    build:
      context: ./app
      dockerfile: ./compose/production/app_postgres/Dockerfile
    container_name: cp_django
    restart: always
    env_file:
      - .envs/epa.postgres
    expose:
      - 8000
    volumes:
      - static_volume_pg:/src/cdn_static_root
    command: "gunicorn --workers=2 --bind=0.0.0.0:8000 epa.wsgi:application"
    depends_on:
      - db_pg
    networks:
      - cp_network
  djangoq_pg:
    build:
      context: ./app
      dockerfile: ./compose/production/app_postgres/Dockerfile_djangoq
    container_name: cp_django-q
    restart: always
    env_file:
      - .envs/epa.postgres
    command: python manage.py qcluster
    volumes:
      - .:/code
    expose:
      - 8000
    depends_on:
      - db_pg
      - app_pg
    networks:
      - cp_network
  nginx_pg:
    image: nginx:1.21-alpine
    container_name: cp_ngx
    restart: always
    ports:
      - "8075:80"
      - "8100:8100"
    volumes:
      - ./nginx/postgres:/etc/nginx/conf.d
      - static_volume_pg:/static
    depends_on:
      - app_pg
    networks:
      - cp_network

  libreoffice:
      image: lcrea/libreoffice-headless
      networks:
        - cp_network

#  libreoffice:
#    build:
#      context: ./FATE_tool
#      dockerfile: ./compose/production/app_postgres/Dockerfile
#    container_name: libreoffice_pg
#    env_file:
#      - .envs/epa.postgres
#    expose:
#      - 8100
#    depends_on:
#      - app_pg
#    networks:
#      - open_plan_network_pg
volumes:
  db_data_pg:
  static_volume_pg:

networks:
  cp_network:
